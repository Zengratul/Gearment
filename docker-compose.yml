services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gearment-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: gearment
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - gearment-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gearment-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=5001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=12345678
      - DB_NAME=gearment
      - JWT_SECRET=vietdeptrai
      - JWT_EXPIRES_IN=24h
      - CORS_ORIGINS=http://localhost:3000,http://localhost:6000
    ports:
      - "5001:5001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gearment-network
    command: pnpm run start:dev

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gearment-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:5001/api
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - gearment-network
    command: pnpm run dev

volumes:
  postgres_data:
    driver: local

networks:
  gearment-network:
    driver: bridge
